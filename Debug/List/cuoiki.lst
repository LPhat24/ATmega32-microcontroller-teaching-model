
AVRASM ver. 2.1.30  D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm Sun Nov 03 19:16:06 2024

D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1093): warning: Register r9 already defined by the .DEF directive
D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1095): warning: Register r11 already defined by the .DEF directive
D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1096): warning: Register r12 already defined by the .DEF directive
D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _length=R4
                 	.DEF _length_msb=R5
                 	.DEF _i=R6
                 	.DEF _i_msb=R7
                 	.DEF _j=R8
                 	.DEF _j_msb=R9
                 	.DEF _k=R10
                 	.DEF _k_msb=R11
                 	.DEF _x=R12
                 	.DEF _x_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0053 	JMP  __RESET
000002 940c 0080 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 4548
00002b 4c4c
D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1129): warning: .cseg .db misalignment - padding zero byte
00002c 004f      	.DB  0x48,0x45,0x4C,0x4C,0x4F
                 _0x4:
00002d f9c0
00002e b0a4
00002f 9299
000030 f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
000031 9080      	.DB  0x80,0x90
                 _0x0:
000032 684e
000033 6569
000034 2074
000035 6f64      	.DB  0x4E,0x68,0x69,0x65,0x74,0x20,0x64,0x6F
000036 203a
000037 2000
000038 474e
000039 5955      	.DB  0x3A,0x20,0x0,0x20,0x4E,0x47,0x55,0x59
00003a 4820
00003b 4549
00003c 204d
00003d 2121      	.DB  0x20,0x48,0x49,0x45,0x4D,0x20,0x21,0x21
00003e 0021      	.DB  0x21,0x0
                 _0x2000003:
00003f c080      	.DB  0x80,0xC0
                 _0x2040060:
D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1141): warning: .cseg .db misalignment - padding zero byte
000040 0001      	.DB  0x1
                 _0x2040000:
000041 4e2d
000042 4e41
000043 4900
000044 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\cvavr\Final_project\cuoiki\Debug\List\cuoiki.asm(1144): warning: .cseg .db misalignment - padding zero byte
000045 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000046 0005      	.DW  0x05
000047 0260      	.DW  _c
000048 0054      	.DW  _0x3*2
                 
000049 000a      	.DW  0x0A
00004a 0278      	.DW  _LED7_Code
00004b 005a      	.DW  _0x4*2
                 
00004c 0002      	.DW  0x02
00004d 0284      	.DW  __base_y_G100
00004e 007e      	.DW  _0x2000003*2
                 
00004f 0001      	.DW  0x01
000050 028b      	.DW  __seed_G102
000051 0080      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000052 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000053 94f8      	CLI
000054 27ee      	CLR  R30
000055 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000056 e0f1      	LDI  R31,1
000057 bffb      	OUT  GICR,R31
000058 bfeb      	OUT  GICR,R30
000059 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005a e08d      	LDI  R24,(14-2)+1
00005b e0a2      	LDI  R26,2
00005c 27bb      	CLR  R27
                 __CLEAR_REG:
00005d 93ed      	ST   X+,R30
00005e 958a      	DEC  R24
00005f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000060 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000061 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000062 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000063 93ed      	ST   X+,R30
000064 9701      	SBIW R24,1
000065 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000066 e8ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000067 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000068 9185      	LPM  R24,Z+
000069 9195      	LPM  R25,Z+
00006a 9700      	SBIW R24,0
00006b f061      	BREQ __GLOBAL_INI_END
00006c 91a5      	LPM  R26,Z+
00006d 91b5      	LPM  R27,Z+
00006e 9005      	LPM  R0,Z+
00006f 9015      	LPM  R1,Z+
000070 01bf      	MOVW R22,R30
000071 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000072 9005      	LPM  R0,Z+
000073 920d      	ST   X+,R0
000074 9701      	SBIW R24,1
000075 f7e1      	BRNE __GLOBAL_INI_LOOP
000076 01fb      	MOVW R30,R22
000077 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000078 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000079 bfed      	OUT  SPL,R30
00007a e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007d e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007e 940c 018a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define ADC_VREF_TYPE 0x20
                 ;
                 ;char c[] = "HELLO";
                 
                 	.DSEG
                 ;int length;
                 ;int i, j, k, x;
                 ;unsigned char ADC0;
                 ;char mystr[10];
                 ;int nhietdo;
                 ;char mystr2[5];
                 ;unsigned char LED7_Code[10] = {
                 ;    0b11000000,
                 ;    0b11111001,
                 ;    0b10100100,
                 ;    0b10110000,
                 ;    0b10011001,
                 ;    0b10010010,
                 ;    0b10000010,
                 ;    0b11111000,
                 ;    0b10000000,
                 ;    0b10010000
                 ;};
                 ;unsigned int demxung = 0;
                 ;
                 ;interrupt [ EXT_INT0 ] void ext_int0_isr(void){
                 ; 0000 001E interrupt [ 2 ] void ext_int0_isr(void){
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000080 93aa      	ST   -Y,R26
000081 93ba      	ST   -Y,R27
000082 93ea      	ST   -Y,R30
000083 93fa      	ST   -Y,R31
000084 b7ef      	IN   R30,SREG
000085 93ea      	ST   -Y,R30
                 ; 0000 001F  demxung++;
000086 e8a2      	LDI  R26,LOW(_demxung)
000087 e0b2      	LDI  R27,HIGH(_demxung)
000088 91ed      	LD   R30,X+
000089 91fd      	LD   R31,X+
00008a 9631      	ADIW R30,1
00008b 93fe      	ST   -X,R31
00008c 93ee      	ST   -X,R30
                 ; 0000 0020 }
00008d 91e9      	LD   R30,Y+
00008e bfef      	OUT  SREG,R30
00008f 91f9      	LD   R31,Y+
000090 91e9      	LD   R30,Y+
000091 91b9      	LD   R27,Y+
000092 91a9      	LD   R26,Y+
000093 9518      	RETI
                 ; .FEND
                 ;unsigned char read_adc(unsigned char adc_input) {
                 ; 0000 0021 unsigned char read_adc(unsigned char adc_input) {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0022     ADMUX = adc_input | (ADC_VREF_TYPE & 0xff);
000094 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000095 81e8      	LD   R30,Y
000096 62e0      	ORI  R30,0x20
000097 b9e7      	OUT  0x7,R30
                 ; 0000 0023     delay_us(10);
                +
000098 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000099 958a     +DEC R24
00009a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0024     ADCSRA |= 0x40;
00009b 9a36      	SBI  0x6,6
                 ; 0000 0025     while ((ADCSRA & 0x10) == 0);
                 _0x5:
00009c 9b34      	SBIS 0x6,4
00009d cffe      	RJMP _0x5
                 ; 0000 0026     ADCSRA |= 0x10;
00009e 9a34      	SBI  0x6,4
                 ; 0000 0027     return ADCH;
00009f b1e5      	IN   R30,0x5
0000a0 940c 0276 	JMP  _0x20A0001
                 ; 0000 0028 }
                 ; .FEND
                 ;
                 ;
                 ;void htso_mayphat(unsigned int so){
                 ; 0000 002B void htso_mayphat(unsigned int so){
                 _htso_mayphat:
                 ; .FSTART _htso_mayphat
                 ; 0000 002C  lcd_putchar(so/10000 + 48);
0000a2 93ba      	ST   -Y,R27
0000a3 93aa      	ST   -Y,R26
                 ;	so -> Y+0
0000a4 81a8      	LD   R26,Y
0000a5 81b9      	LDD  R27,Y+1
0000a6 e1e0      	LDI  R30,LOW(10000)
0000a7 e2f7      	LDI  R31,HIGH(10000)
0000a8 940e 0307 	CALL __DIVW21U
0000aa 940e 02b2 	CALL SUBOPT_0x0
                 ; 0000 002D  lcd_putchar(so/1000%10 + 48);
0000ac eee8      	LDI  R30,LOW(1000)
0000ad e0f3      	LDI  R31,HIGH(1000)
0000ae 940e 02b9 	CALL SUBOPT_0x1
                 ; 0000 002E  lcd_putchar(so/100%10 + 48);
0000b0 e6e4      	LDI  R30,LOW(100)
0000b1 e0f0      	LDI  R31,HIGH(100)
0000b2 940e 02b9 	CALL SUBOPT_0x1
                 ; 0000 002F  lcd_putchar(so/10%10 + 48);
0000b4 e0ea      	LDI  R30,LOW(10)
0000b5 e0f0      	LDI  R31,HIGH(10)
0000b6 940e 02b9 	CALL SUBOPT_0x1
                 ; 0000 0030  lcd_putchar(so%10 + 48);
0000b8 e0ea      	LDI  R30,LOW(10)
0000b9 e0f0      	LDI  R31,HIGH(10)
0000ba 940e 031a 	CALL __MODW21U
0000bc 5de0      	SUBI R30,-LOW(48)
0000bd 2fae      	MOV  R26,R30
0000be d148      	RCALL _lcd_putchar
                 ; 0000 0031 }
0000bf c137      	RJMP _0x20A0003
                 ; .FEND
                 ;
                 ;
                 ;void bai_35() {
                 ; 0000 0034 void bai_35() {
                 _bai_35:
                 ; .FSTART _bai_35
                 ; 0000 0035 
                 ; 0000 0036         for (i = 15; i >= -length; i--) {
0000c0 e0ef      	LDI  R30,LOW(15)
0000c1 e0f0      	LDI  R31,HIGH(15)
0000c2 013f      	MOVW R6,R30
                 _0x9:
0000c3 01f2      	MOVW R30,R4
0000c4 940e 02ed 	CALL __ANEGW1
0000c6 166e      	CP   R6,R30
0000c7 067f      	CPC  R7,R31
0000c8 f13c      	BRLT _0xA
                 ; 0000 0037             lcd_clear();
0000c9 d12f      	RCALL _lcd_clear
                 ; 0000 0038             for (j = 0; j < length; j++) {
0000ca 2488      	CLR  R8
0000cb 2499      	CLR  R9
                 _0xC:
                +
0000cc 1484     +CP R8 , R4
0000cd 0495     +CPC R9 , R5
                 	__CPWRR 8,9,4,5
0000ce f4d4      	BRGE _0xD
                 ; 0000 0039                 if (i + j >= 0 && i + j <= 15) {
0000cf 01d4      	MOVW R26,R8
0000d0 0da6      	ADD  R26,R6
0000d1 1db7      	ADC  R27,R7
0000d2 23bb      	TST  R27
0000d3 f02a      	BRMI _0xF
0000d4 01d4      	MOVW R26,R8
0000d5 0da6      	ADD  R26,R6
0000d6 1db7      	ADC  R27,R7
0000d7 9750      	SBIW R26,16
0000d8 f00c      	BRLT _0x10
                 _0xF:
0000d9 c00b      	RJMP _0xE
                 _0x10:
                 ; 0000 003A                     lcd_gotoxy(i + j, 0);
0000da 2de8      	MOV  R30,R8
0000db 0de6      	ADD  R30,R6
0000dc 93ea      	ST   -Y,R30
0000dd e0a0      	LDI  R26,LOW(0)
0000de d109      	RCALL _lcd_gotoxy
                 ; 0000 003B                     lcd_putchar(c[j]);
0000df e6a0      	LDI  R26,LOW(_c)
0000e0 e0b2      	LDI  R27,HIGH(_c)
0000e1 0da8      	ADD  R26,R8
0000e2 1db9      	ADC  R27,R9
0000e3 91ac      	LD   R26,X
0000e4 d122      	RCALL _lcd_putchar
                 ; 0000 003C                 }
                 ; 0000 003D             }
                 _0xE:
0000e5 01f4      	MOVW R30,R8
0000e6 9631      	ADIW R30,1
0000e7 014f      	MOVW R8,R30
0000e8 cfe3      	RJMP _0xC
                 _0xD:
                 ; 0000 003E             delay_ms(100);
0000e9 940e 02c1 	CALL SUBOPT_0x2
                 ; 0000 003F         }
0000eb 01f3      	MOVW R30,R6
0000ec 9731      	SBIW R30,1
0000ed 013f      	MOVW R6,R30
0000ee 9631      	ADIW R30,1
0000ef cfd3      	RJMP _0x9
                 _0xA:
                 ; 0000 0040 
                 ; 0000 0041 }
0000f0 9508      	RET
                 ; .FEND
                 ;
                 ;void bai_31_A() {
                 ; 0000 0043 void bai_31_A() {
                 _bai_31_A:
                 ; .FSTART _bai_31_A
                 ; 0000 0044         for (k = 0; k <= 8; k++) {
0000f1 24aa      	CLR  R10
0000f2 24bb      	CLR  R11
                 _0x12:
0000f3 e0e8      	LDI  R30,LOW(8)
0000f4 e0f0      	LDI  R31,HIGH(8)
0000f5 15ea      	CP   R30,R10
0000f6 05fb      	CPC  R31,R11
0000f7 f05c      	BRLT _0x13
                 ; 0000 0045             PORTB = 0b00000001 << k;
0000f8 2dea      	MOV  R30,R10
0000f9 e0a1      	LDI  R26,LOW(1)
0000fa 940e 02f1 	CALL __LSLB12
0000fc bbe8      	OUT  0x18,R30
                 ; 0000 0046             delay_ms(100);
0000fd 940e 02c1 	CALL SUBOPT_0x2
                 ; 0000 0047         }
0000ff 01f5      	MOVW R30,R10
000100 9631      	ADIW R30,1
000101 015f      	MOVW R10,R30
000102 cff0      	RJMP _0x12
                 _0x13:
                 ; 0000 0048 }
000103 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void bai_31_B(){
                 ; 0000 004B void bai_31_B(){
                 _bai_31_B:
                 ; .FSTART _bai_31_B
                 ; 0000 004C         for (k = 0; k <= 8; k++) {
000104 24aa      	CLR  R10
000105 24bb      	CLR  R11
                 _0x15:
000106 e0e8      	LDI  R30,LOW(8)
000107 e0f0      	LDI  R31,HIGH(8)
000108 15ea      	CP   R30,R10
000109 05fb      	CPC  R31,R11
00010a f05c      	BRLT _0x16
                 ; 0000 004D             PORTB = 0b10000000 >> k;
00010b 2dea      	MOV  R30,R10
00010c e8a0      	LDI  R26,LOW(128)
00010d 940e 02f9 	CALL __LSRB12
00010f bbe8      	OUT  0x18,R30
                 ; 0000 004E             delay_ms(100);
000110 940e 02c1 	CALL SUBOPT_0x2
                 ; 0000 004F         }
000112 01f5      	MOVW R30,R10
000113 9631      	ADIW R30,1
000114 015f      	MOVW R10,R30
000115 cff0      	RJMP _0x15
                 _0x16:
                 ; 0000 0050 
                 ; 0000 0051 }
000116 9508      	RET
                 ; .FEND
                 ;
                 ;void bai_32() {
                 ; 0000 0053 void bai_32() {
                 _bai_32:
                 ; .FSTART _bai_32
                 ; 0000 0054 
                 ; 0000 0055         for (x = 0; x <= 9; x++) {
000117 24cc      	CLR  R12
000118 24dd      	CLR  R13
                 _0x18:
000119 e0e9      	LDI  R30,LOW(9)
00011a e0f0      	LDI  R31,HIGH(9)
00011b 15ec      	CP   R30,R12
00011c 05fd      	CPC  R31,R13
00011d f09c      	BRLT _0x19
                 ; 0000 0056             PORTC = LED7_Code[x];
00011e e7a8      	LDI  R26,LOW(_LED7_Code)
00011f e0b2      	LDI  R27,HIGH(_LED7_Code)
000120 0dac      	ADD  R26,R12
000121 1dbd      	ADC  R27,R13
000122 91ec      	LD   R30,X
000123 bbe5      	OUT  0x15,R30
                 ; 0000 0057             PORTB = ~LED7_Code[x];
000124 e7a8      	LDI  R26,LOW(_LED7_Code)
000125 e0b2      	LDI  R27,HIGH(_LED7_Code)
000126 0dac      	ADD  R26,R12
000127 1dbd      	ADC  R27,R13
000128 91ec      	LD   R30,X
000129 95e0      	COM  R30
00012a bbe8      	OUT  0x18,R30
                 ; 0000 0058             delay_ms(100);
00012b 940e 02c1 	CALL SUBOPT_0x2
                 ; 0000 0059         }
00012d 01f6      	MOVW R30,R12
00012e 9631      	ADIW R30,1
00012f 016f      	MOVW R12,R30
000130 cfe8      	RJMP _0x18
                 _0x19:
                 ; 0000 005A 
                 ; 0000 005B }
000131 9508      	RET
                 ; .FEND
                 ;
                 ;void bai_38_39() {
                 ; 0000 005D void bai_38_39() {
                 _bai_38_39:
                 ; .FSTART _bai_38_39
                 ; 0000 005E     ADC0 = read_adc(0);
000132 e0a0      	LDI  R26,LOW(0)
000133 df60      	RCALL _read_adc
000134 93e0 0266 	STS  _ADC0,R30
                 ; 0000 005F     lcd_clear();
000136 d0c2      	RCALL _lcd_clear
                 ; 0000 0060     lcd_gotoxy(0, 0);
000137 e0e0      	LDI  R30,LOW(0)
000138 93ea      	ST   -Y,R30
000139 e0a0      	LDI  R26,LOW(0)
00013a d0ad      	RCALL _lcd_gotoxy
                 ; 0000 0061     itoa(ADC0, mystr);
00013b 91e0 0266 	LDS  R30,_ADC0
00013d e0f0      	LDI  R31,0
00013e 93fa      	ST   -Y,R31
00013f 93ea      	ST   -Y,R30
000140 e6a7      	LDI  R26,LOW(_mystr)
000141 e0b2      	LDI  R27,HIGH(_mystr)
000142 940e 0284 	CALL _itoa
                 ; 0000 0062     lcd_puts(mystr);
000144 e6a7      	LDI  R26,LOW(_mystr)
000145 e0b2      	LDI  R27,HIGH(_mystr)
000146 d0e0      	RCALL _lcd_puts
                 ; 0000 0063     lcd_gotoxy(0, 1);
000147 940e 02c5 	CALL SUBOPT_0x3
                 ; 0000 0064     nhietdo = read_adc(1) * 2;
000149 940e 02ca 	CALL SUBOPT_0x4
                 ; 0000 0065     itoa(nhietdo, mystr2);
00014b 91e0 0271 	LDS  R30,_nhietdo
00014d 91f0 0272 	LDS  R31,_nhietdo+1
00014f 93fa      	ST   -Y,R31
000150 93ea      	ST   -Y,R30
000151 e7a3      	LDI  R26,LOW(_mystr2)
000152 e0b2      	LDI  R27,HIGH(_mystr2)
000153 940e 0284 	CALL _itoa
                 ; 0000 0066     lcd_putsf("Nhiet do: ");
                +
000155 e6a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000156 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000157 d0de      	RCALL _lcd_putsf
                 ; 0000 0067     lcd_puts(mystr2);
000158 e7a3      	LDI  R26,LOW(_mystr2)
000159 e0b2      	LDI  R27,HIGH(_mystr2)
00015a d0cc      	RCALL _lcd_puts
                 ; 0000 0068 
                 ; 0000 0069     while (nhietdo >= 50) {
                 _0x1A:
00015b 91a0 0271 	LDS  R26,_nhietdo
00015d 91b0 0272 	LDS  R27,_nhietdo+1
00015f 97d2      	SBIW R26,50
000160 f09c      	BRLT _0x1C
                 ; 0000 006A         lcd_clear();
000161 d097      	RCALL _lcd_clear
                 ; 0000 006B         lcd_gotoxy(0, 1);
000162 940e 02c5 	CALL SUBOPT_0x3
                 ; 0000 006C         lcd_putsf(" NGUY HIEM !!!");
                +
000164 e6af     +LDI R26 , LOW ( 2 * _0x0 + ( 11 ) )
000165 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW2FN _0x0,11
000166 d0cf      	RCALL _lcd_putsf
                 ; 0000 006D         nhietdo = read_adc(1) * 2;
000167 940e 02ca 	CALL SUBOPT_0x4
                 ; 0000 006E         PORTD.3 = 1;
000169 9a93      	SBI  0x12,3
                 ; 0000 006F         delay_ms(200);
00016a eca8      	LDI  R26,LOW(200)
00016b e0b0      	LDI  R27,0
00016c 940e 02e3 	CALL _delay_ms
                 ; 0000 0070         PORTD.3 = 0;
00016e 9893      	CBI  0x12,3
                 ; 0000 0071         delay_ms(200);
00016f eca8      	LDI  R26,LOW(200)
000170 e0b0      	LDI  R27,0
000171 940e 02e3 	CALL _delay_ms
                 ; 0000 0072     }
000173 cfe7      	RJMP _0x1A
                 _0x1C:
                 ; 0000 0073 }
000174 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void bai_310(){
                 ; 0000 0076 void bai_310(){
                 _bai_310:
                 ; .FSTART _bai_310
                 ; 0000 0077 
                 ; 0000 0078         demxung = 0;
000175 e0e0      	LDI  R30,LOW(0)
000176 93e0 0282 	STS  _demxung,R30
000178 93e0 0283 	STS  _demxung+1,R30
                 ; 0000 0079         TCNT0 = 0;
00017a bfe2      	OUT  0x32,R30
                 ; 0000 007A         while (TCNT0 < 78){}
                 _0x21:
00017b b7e2      	IN   R30,0x32
00017c 34ee      	CPI  R30,LOW(0x4E)
00017d f3e8      	BRLO _0x21
                 ; 0000 007B         lcd_gotoxy(0,1);
00017e 940e 02c5 	CALL SUBOPT_0x3
                 ; 0000 007C         //lcd_putsf("Tan so: ");
                 ; 0000 007D         htso_mayphat(demxung*100);
000180 91a0 0282 	LDS  R26,_demxung
000182 91b0 0283 	LDS  R27,_demxung+1
000184 e6e4      	LDI  R30,LOW(100)
000185 940e 0301 	CALL __MULB1W2U
000187 01df      	MOVW R26,R30
000188 df19      	RCALL _htso_mayphat
                 ; 0000 007E 
                 ; 0000 007F }
000189 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void) {
                 ; 0000 0082 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0083     DDRB = 0xFF;
00018a efef      	LDI  R30,LOW(255)
00018b bbe7      	OUT  0x17,R30
                 ; 0000 0084     PORTB = 0x00;
00018c e0e0      	LDI  R30,LOW(0)
00018d bbe8      	OUT  0x18,R30
                 ; 0000 0085 
                 ; 0000 0086     DDRD.3 = 1;
00018e 9a8b      	SBI  0x11,3
                 ; 0000 0087     PORTD.3 = 0;
00018f 9893      	CBI  0x12,3
                 ; 0000 0088 
                 ; 0000 0089     DDRC = 0xFF;
000190 efef      	LDI  R30,LOW(255)
000191 bbe4      	OUT  0x14,R30
                 ; 0000 008A     PORTC = 0xFF;
000192 bbe5      	OUT  0x15,R30
                 ; 0000 008B 
                 ; 0000 008C     DDRA = 0x00;
000193 e0e0      	LDI  R30,LOW(0)
000194 bbea      	OUT  0x1A,R30
                 ; 0000 008D     PORTA = 0b11111100;
000195 efec      	LDI  R30,LOW(252)
000196 bbeb      	OUT  0x1B,R30
                 ; 0000 008E 
                 ; 0000 008F     ACSR = 0x80;
000197 e8e0      	LDI  R30,LOW(128)
000198 b9e8      	OUT  0x8,R30
                 ; 0000 0090     SFIOR = 0x00;
000199 e0e0      	LDI  R30,LOW(0)
00019a bfe0      	OUT  0x30,R30
                 ; 0000 0091     ADMUX = ADC_VREF_TYPE & 0xff;
00019b e2e0      	LDI  R30,LOW(32)
00019c b9e7      	OUT  0x7,R30
                 ; 0000 0092     ADCSRA = 0x84;
00019d e8e4      	LDI  R30,LOW(132)
00019e b9e6      	OUT  0x6,R30
                 ; 0000 0093 
                 ; 0000 0094     length = strlen(c);
00019f e6a0      	LDI  R26,LOW(_c)
0001a0 e0b2      	LDI  R27,HIGH(_c)
0001a1 940e 0278 	CALL _strlen
0001a3 012f      	MOVW R4,R30
                 ; 0000 0095 
                 ; 0000 0096     GICR = (1<<INT0);
0001a4 e4e0      	LDI  R30,LOW(64)
0001a5 bfeb      	OUT  0x3B,R30
                 ; 0000 0097     MCUCR = (1<<ISC01)|(1<<ISC00);
0001a6 e0e3      	LDI  R30,LOW(3)
0001a7 bfe5      	OUT  0x35,R30
                 ; 0000 0098     TCCR0 = (1<<CS02)|(0<<CS01)|(1<<CS00);
0001a8 e0e5      	LDI  R30,LOW(5)
0001a9 bfe3      	OUT  0x33,R30
                 ; 0000 0099     lcd_init(16);
0001aa e1a0      	LDI  R26,LOW(16)
0001ab d09d      	RCALL _lcd_init
                 ; 0000 009A     #asm("sei")
0001ac 9478      	sei
                 ; 0000 009B     while (1) {
                 _0x28:
                 ; 0000 009C         while (PINA.3 == 0)bai_310();
                 _0x2B:
0001ad 99cb      	SBIC 0x19,3
0001ae c002      	RJMP _0x2D
0001af dfc5      	RCALL _bai_310
0001b0 cffc      	RJMP _0x2B
                 _0x2D:
                 ; 0000 009D if  (PINA.5 == 0) bai_31_A();
0001b1 99cd      	SBIC 0x19,5
0001b2 c002      	RJMP _0x2E
0001b3 df3d      	RCALL _bai_31_A
                 ; 0000 009E         else if (PINA.7 == 0) bai_32();
0001b4 c011      	RJMP _0x2F
                 _0x2E:
0001b5 99cf      	SBIC 0x19,7
0001b6 c002      	RJMP _0x30
0001b7 df5f      	RCALL _bai_32
                 ; 0000 009F         else if (PINA.4 == 0) bai_35();
0001b8 c00d      	RJMP _0x31
                 _0x30:
0001b9 99cc      	SBIC 0x19,4
0001ba c002      	RJMP _0x32
0001bb df04      	RCALL _bai_35
                 ; 0000 00A0         else if (PINA.2 == 0)bai_38_39();
0001bc c009      	RJMP _0x33
                 _0x32:
0001bd 99ca      	SBIC 0x19,2
0001be c002      	RJMP _0x34
0001bf df72      	RCALL _bai_38_39
                 ; 0000 00A1         else if (PINA.6 == 0) bai_31_B();
0001c0 c005      	RJMP _0x35
                 _0x34:
0001c1 99ce      	SBIC 0x19,6
0001c2 c002      	RJMP _0x36
0001c3 df40      	RCALL _bai_31_B
                 ; 0000 00A2         else lcd_clear();
0001c4 c001      	RJMP _0x37
                 _0x36:
0001c5 d033      	RCALL _lcd_clear
                 ; 0000 00A3     }
                 _0x37:
                 _0x35:
                 _0x33:
                 _0x31:
                 _0x2F:
0001c6 cfe6      	RJMP _0x28
                 ; 0000 00A4 }
                 _0x38:
0001c7 cfff      	RJMP _0x38
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001c8 93aa      	ST   -Y,R26
0001c9 b3e2      	IN   R30,0x12
0001ca 70ef      	ANDI R30,LOW(0xF)
0001cb 2fae      	MOV  R26,R30
0001cc 81e8      	LD   R30,Y
0001cd 7fe0      	ANDI R30,LOW(0xF0)
0001ce 2bea      	OR   R30,R26
0001cf bbe2      	OUT  0x12,R30
                +
0001d0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001d1 958a     +DEC R24
0001d2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001d3 9a91      	SBI  0x12,1
                +
0001d4 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001d5 958a     +DEC R24
0001d6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001d7 9891      	CBI  0x12,1
                +
0001d8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001d9 958a     +DEC R24
0001da f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001db c09a      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001dc 93aa      	ST   -Y,R26
0001dd 81a8      	LD   R26,Y
0001de dfe9      	RCALL __lcd_write_nibble_G100
0001df 81e8          ld    r30,y
0001e0 95e2          swap  r30
0001e1 83e8          st    y,r30
0001e2 81a8      	LD   R26,Y
0001e3 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001e4 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001e5 958a     +DEC R24
0001e6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001e7 c08e      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001e8 93aa      	ST   -Y,R26
0001e9 81e8      	LD   R30,Y
0001ea e0f0      	LDI  R31,0
0001eb 57ec      	SUBI R30,LOW(-__base_y_G100)
0001ec 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0001ed 81e0      	LD   R30,Z
0001ee 81a9      	LDD  R26,Y+1
0001ef 0fae      	ADD  R26,R30
0001f0 dfeb      	RCALL __lcd_write_data
0001f1 81e9      	LDD  R30,Y+1
0001f2 93e0 0288 	STS  __lcd_x,R30
0001f4 81e8      	LD   R30,Y
0001f5 93e0 0289 	STS  __lcd_y,R30
                 _0x20A0003:
0001f7 9622      	ADIW R28,2
0001f8 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001f9 e0a2      	LDI  R26,LOW(2)
0001fa 940e 02d5 	CALL SUBOPT_0x5
0001fc e0ac      	LDI  R26,LOW(12)
0001fd dfde      	RCALL __lcd_write_data
0001fe e0a1      	LDI  R26,LOW(1)
0001ff 940e 02d5 	CALL SUBOPT_0x5
000201 e0e0      	LDI  R30,LOW(0)
000202 93e0 0289 	STS  __lcd_y,R30
000204 93e0 0288 	STS  __lcd_x,R30
000206 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000207 93aa      	ST   -Y,R26
000208 81a8      	LD   R26,Y
000209 30aa      	CPI  R26,LOW(0xA)
00020a f031      	BREQ _0x2000005
00020b 91e0 028a 	LDS  R30,__lcd_maxx
00020d 91a0 0288 	LDS  R26,__lcd_x
00020f 17ae      	CP   R26,R30
000210 f060      	BRLO _0x2000004
                 _0x2000005:
000211 e0e0      	LDI  R30,LOW(0)
000212 93ea      	ST   -Y,R30
000213 91a0 0289 	LDS  R26,__lcd_y
000215 5faf      	SUBI R26,-LOW(1)
000216 93a0 0289 	STS  __lcd_y,R26
000218 dfcf      	RCALL _lcd_gotoxy
000219 81a8      	LD   R26,Y
00021a 30aa      	CPI  R26,LOW(0xA)
00021b f409      	BRNE _0x2000007
00021c c059      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
00021d 91e0 0288 	LDS  R30,__lcd_x
00021f 5fef      	SUBI R30,-LOW(1)
000220 93e0 0288 	STS  __lcd_x,R30
000222 9aaf      	SBI  0x15,7
000223 81a8      	LD   R26,Y
000224 dfb7      	RCALL __lcd_write_data
000225 98af      	CBI  0x15,7
000226 c04f      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000227 93ba      	ST   -Y,R27
000228 93aa      	ST   -Y,R26
000229 931a      	ST   -Y,R17
                 _0x2000008:
00022a 81a9      	LDD  R26,Y+1
00022b 81ba      	LDD  R27,Y+1+1
00022c 91ed      	LD   R30,X+
00022d 83a9      	STD  Y+1,R26
00022e 83ba      	STD  Y+1+1,R27
00022f 2f1e      	MOV  R17,R30
000230 30e0      	CPI  R30,0
000231 f019      	BREQ _0x200000A
000232 2fa1      	MOV  R26,R17
000233 dfd3      	RCALL _lcd_putchar
000234 cff5      	RJMP _0x2000008
                 _0x200000A:
000235 c010      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000236 93ba      	ST   -Y,R27
000237 93aa      	ST   -Y,R26
000238 931a      	ST   -Y,R17
                 _0x200000B:
000239 81e9      	LDD  R30,Y+1
00023a 81fa      	LDD  R31,Y+1+1
00023b 9631      	ADIW R30,1
00023c 83e9      	STD  Y+1,R30
00023d 83fa      	STD  Y+1+1,R31
00023e 9731      	SBIW R30,1
00023f 91e4      	LPM  R30,Z
000240 2f1e      	MOV  R17,R30
000241 30e0      	CPI  R30,0
000242 f019      	BREQ _0x200000D
000243 2fa1      	MOV  R26,R17
000244 dfc2      	RCALL _lcd_putchar
000245 cff3      	RJMP _0x200000B
                 _0x200000D:
                 _0x20A0002:
000246 8118      	LDD  R17,Y+0
000247 9623      	ADIW R28,3
000248 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000249 93aa      	ST   -Y,R26
00024a b3e1      	IN   R30,0x11
00024b 6fe0      	ORI  R30,LOW(0xF0)
00024c bbe1      	OUT  0x11,R30
00024d 9a89      	SBI  0x11,1
00024e 9aa7      	SBI  0x14,7
00024f 9a88      	SBI  0x11,0
000250 9891      	CBI  0x12,1
000251 98af      	CBI  0x15,7
000252 9890      	CBI  0x12,0
000253 81e8      	LD   R30,Y
000254 93e0 028a 	STS  __lcd_maxx,R30
000256 58e0      	SUBI R30,-LOW(128)
                +
000257 93e0 0286+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000259 81e8      	LD   R30,Y
00025a 54e0      	SUBI R30,-LOW(192)
                +
00025b 93e0 0287+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00025d e1a4      	LDI  R26,LOW(20)
00025e e0b0      	LDI  R27,0
00025f 940e 02e3 	CALL _delay_ms
000261 940e 02db 	CALL SUBOPT_0x6
000263 940e 02db 	CALL SUBOPT_0x6
000265 940e 02db 	CALL SUBOPT_0x6
000267 e2a0      	LDI  R26,LOW(32)
000268 df5f      	RCALL __lcd_write_nibble_G100
                +
000269 ec88     +LDI R24 , LOW ( 200 )
00026a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00026b 9701     +SBIW R24 , 1
00026c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00026d e2a8      	LDI  R26,LOW(40)
00026e df6d      	RCALL __lcd_write_data
00026f e0a4      	LDI  R26,LOW(4)
000270 df6b      	RCALL __lcd_write_data
000271 e8a5      	LDI  R26,LOW(133)
000272 df69      	RCALL __lcd_write_data
000273 e0a6      	LDI  R26,LOW(6)
000274 df67      	RCALL __lcd_write_data
000275 df83      	RCALL _lcd_clear
                 _0x20A0001:
000276 9621      	ADIW R28,1
000277 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000278 93ba      	ST   -Y,R27
000279 93aa      	ST   -Y,R26
00027a 91a9          ld   r26,y+
00027b 91b9          ld   r27,y+
00027c 27ee          clr  r30
00027d 27ff          clr  r31
                 strlen0:
00027e 916d          ld   r22,x+
00027f 2366          tst  r22
000280 f011          breq strlen1
000281 9631          adiw r30,1
000282 cffb          rjmp strlen0
                 strlen1:
000283 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000284 93ba      	ST   -Y,R27
000285 93aa      	ST   -Y,R26
000286 91a9          ld   r26,y+
000287 91b9          ld   r27,y+
000288 91e9          ld   r30,y+
000289 91f9          ld   r31,y+
00028a 9630          adiw r30,0
00028b f42a          brpl __itoa0
00028c 95e0          com  r30
00028d 95f0          com  r31
00028e 9631          adiw r30,1
00028f e26d          ldi  r22,'-'
000290 936d          st   x+,r22
                 __itoa0:
000291 94e8          clt
000292 e180          ldi  r24,low(10000)
000293 e297          ldi  r25,high(10000)
000294 d00d          rcall __itoa1
000295 ee88          ldi  r24,low(1000)
000296 e093          ldi  r25,high(1000)
000297 d00a          rcall __itoa1
000298 e684          ldi  r24,100
000299 2799          clr  r25
00029a d007          rcall __itoa1
00029b e08a          ldi  r24,10
00029c d005          rcall __itoa1
00029d 2f6e          mov  r22,r30
00029e d010          rcall __itoa5
00029f 2766          clr  r22
0002a0 936c          st   x,r22
0002a1 9508          ret
                 
                 __itoa1:
0002a2 2766          clr	 r22
                 __itoa2:
0002a3 17e8          cp   r30,r24
0002a4 07f9          cpc  r31,r25
0002a5 f020          brlo __itoa3
0002a6 9563          inc  r22
0002a7 1be8          sub  r30,r24
0002a8 0bf9          sbc  r31,r25
0002a9 f7c9          brne __itoa2
                 __itoa3:
0002aa 2366          tst  r22
0002ab f411          brne __itoa4
0002ac f016          brts __itoa5
0002ad 9508          ret
                 __itoa4:
0002ae 9468          set
                 __itoa5:
0002af 5d60          subi r22,-0x30
0002b0 936d          st   x+,r22
0002b1 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _c:
000260           	.BYTE 0x6
                 _ADC0:
000266           	.BYTE 0x1
                 _mystr:
000267           	.BYTE 0xA
                 _nhietdo:
000271           	.BYTE 0x2
                 _mystr2:
000273           	.BYTE 0x5
                 _LED7_Code:
000278           	.BYTE 0xA
                 _demxung:
000282           	.BYTE 0x2
                 __base_y_G100:
000284           	.BYTE 0x4
                 __lcd_x:
000288           	.BYTE 0x1
                 __lcd_y:
000289           	.BYTE 0x1
                 __lcd_maxx:
00028a           	.BYTE 0x1
                 __seed_G102:
00028b           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
0002b2 5de0      	SUBI R30,-LOW(48)
0002b3 2fae      	MOV  R26,R30
0002b4 940e 0207 	CALL _lcd_putchar
0002b6 81a8      	LD   R26,Y
0002b7 81b9      	LDD  R27,Y+1
0002b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
0002b9 940e 0307 	CALL __DIVW21U
0002bb 01df      	MOVW R26,R30
0002bc e0ea      	LDI  R30,LOW(10)
0002bd e0f0      	LDI  R31,HIGH(10)
0002be 940e 031a 	CALL __MODW21U
0002c0 cff1      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0002c1 e6a4      	LDI  R26,LOW(100)
0002c2 e0b0      	LDI  R27,0
0002c3 940c 02e3 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0002c5 e0e0      	LDI  R30,LOW(0)
0002c6 93ea      	ST   -Y,R30
0002c7 e0a1      	LDI  R26,LOW(1)
0002c8 940c 01e8 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0002ca e0a1      	LDI  R26,LOW(1)
0002cb 940e 0094 	CALL _read_adc
0002cd e0f0      	LDI  R31,0
0002ce 0fee      	LSL  R30
0002cf 1fff      	ROL  R31
0002d0 93e0 0271 	STS  _nhietdo,R30
0002d2 93f0 0272 	STS  _nhietdo+1,R31
0002d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0002d5 940e 01dc 	CALL __lcd_write_data
0002d7 e0a3      	LDI  R26,LOW(3)
0002d8 e0b0      	LDI  R27,0
0002d9 940c 02e3 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0002db e3a0      	LDI  R26,LOW(48)
0002dc 940e 01c8 	CALL __lcd_write_nibble_G100
                +
0002de ec88     +LDI R24 , LOW ( 200 )
0002df e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002e0 9701     +SBIW R24 , 1
0002e1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002e2 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002e3 9610      	adiw r26,0
0002e4 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002e5 ed80     +LDI R24 , LOW ( 0x7D0 )
0002e6 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002e7 9701     +SBIW R24 , 1
0002e8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002e9 95a8      	wdr
0002ea 9711      	sbiw r26,1
0002eb f7c9      	brne __delay_ms0
                 __delay_ms1:
0002ec 9508      	ret
                 
                 __ANEGW1:
0002ed 95f1      	NEG  R31
0002ee 95e1      	NEG  R30
0002ef 40f0      	SBCI R31,0
0002f0 9508      	RET
                 
                 __LSLB12:
0002f1 23ee      	TST  R30
0002f2 2e0e      	MOV  R0,R30
0002f3 2fea      	MOV  R30,R26
0002f4 f019      	BREQ __LSLB12R
                 __LSLB12L:
0002f5 0fee      	LSL  R30
0002f6 940a      	DEC  R0
0002f7 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0002f8 9508      	RET
                 
                 __LSRB12:
0002f9 23ee      	TST  R30
0002fa 2e0e      	MOV  R0,R30
0002fb 2fea      	MOV  R30,R26
0002fc f019      	BREQ __LSRB12R
                 __LSRB12L:
0002fd 95e6      	LSR  R30
0002fe 940a      	DEC  R0
0002ff f7e9      	BRNE __LSRB12L
                 __LSRB12R:
000300 9508      	RET
                 
                 __MULB1W2U:
000301 2f6e      	MOV  R22,R30
000302 9f6a      	MUL  R22,R26
000303 01f0      	MOVW R30,R0
000304 9f6b      	MUL  R22,R27
000305 0df0      	ADD  R31,R0
000306 9508      	RET
                 
                 __DIVW21U:
000307 2400      	CLR  R0
000308 2411      	CLR  R1
000309 e190      	LDI  R25,16
                 __DIVW21U1:
00030a 0faa      	LSL  R26
00030b 1fbb      	ROL  R27
00030c 1c00      	ROL  R0
00030d 1c11      	ROL  R1
00030e 1a0e      	SUB  R0,R30
00030f 0a1f      	SBC  R1,R31
000310 f418      	BRCC __DIVW21U2
000311 0e0e      	ADD  R0,R30
000312 1e1f      	ADC  R1,R31
000313 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000314 60a1      	SBR  R26,1
                 __DIVW21U3:
000315 959a      	DEC  R25
000316 f799      	BRNE __DIVW21U1
000317 01fd      	MOVW R30,R26
000318 01d0      	MOVW R26,R0
000319 9508      	RET
                 
                 __MODW21U:
00031a dfec      	RCALL __DIVW21U
00031b 01fd      	MOVW R30,R26
00031c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  15 r1 :   5 r2 :   0 r3 :   0 r4 :   3 r5 :   1 r6 :   7 r7 :   3 
r8 :   8 r9 :   3 r10:  10 r11:   4 r12:   6 r13:   4 r14:   0 r15:   0 
r16:   0 r17:   7 r18:   0 r19:   0 r20:   0 r21:   0 r22:  17 r23:   0 
r24:  29 r25:  12 r26:  99 r27:  41 r28:   4 r29:   1 r30: 193 r31:  42 
x  :  15 y  :  70 z  :   9 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   9 
adiw  :  14 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   6 brmi  :   1 brne  :  18 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  36 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  17 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   3 
cp    :   7 cpc   :   6 cpi   :   5 cpse  :   0 dec   :   9 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   1 jmp   :  26 ld    :  33 ldd   :   9 ldi   : 121 
lds   :  11 lpm   :   9 lsl   :   3 lsr   :   1 mov   :  16 movw  :  24 
mul   :   2 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   2 out   :  28 pop   :   0 push  :   0 rcall :  41 ret   :  24 
reti  :   1 rjmp  :  34 rol   :   4 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :   9 sbic  :   6 sbis  :   1 sbiw  :  11 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  40 std   :   4 sts   :  14 sub   :   2 subi  :   8 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 62 out of 116 (53.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00063a   1512     82   1594   32768   4.9%
[.dseg] 0x000060 0x00028f      0     47     47    2048   2.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 13 warnings
